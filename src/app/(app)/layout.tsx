import { env } from '@env'
import configPromise from '@payload-config'
import type { Metadata, Viewport } from 'next'
import { unstable_cache } from 'next/cache'
import { Outfit } from 'next/font/google'
import { getPayload } from 'payload'
import { ReactNode } from 'react'

import GoogleAdsense from '@/components/GoogleAdsense'
import GoogleAnalytics from '@/components/GoogleAnalytics'
import Provider from '@/trpc/Provider'

import './globals.css'

const outfit = Outfit({
  weight: ['400', '500', '600', '700'],
  subsets: ['latin'],
  preload: true,
  adjustFontFallback: false,
})

export const viewport: Viewport = {
  themeColor: 'hsl(var(--primary))',
}

const getCachedSiteSettings = unstable_cache(
  async () => {
    const payload = await getPayload({
      config: configPromise,
    })

    const data = await payload.findGlobal({
      slug: 'site-settings',
      draft: false,
    })

    return data
  },
  ['site-settings'],
  { tags: ['site-settings'] },
)

export async function generateMetadata(): Promise<Metadata> {
  try {
    // calling the site-settings to get all the data
    const metadata = await getCachedSiteSettings()
    const generalSettings = metadata?.general

    const ogImageUrl =
      typeof generalSettings?.ogImageUrl === 'object'
        ? generalSettings?.ogImageUrl?.url!
        : '/images/seed/og-image.png'

    const title = {
      default: generalSettings?.title,
      template: `%s | ${generalSettings?.title}`,
    }

    const description = generalSettings?.description
    const ogImage = [
      {
        url: `${ogImageUrl}`,
        height: 630,
        width: 1200,
        alt: `og image`,
      },
    ]

    return {
      title,
      description,
      // we're appending the http|https int the env variable
      metadataBase: env.PAYLOAD_URL as unknown as URL,
      openGraph: {
        title,
        description,
        images: ogImage,
      },
      twitter: {
        title,
        description,
        images: ogImage,
      },
      keywords: generalSettings?.keywords,
    }
  } catch (error) {
    // in error case returning a base metadata object
    console.log({ error })

    return {
      title: 'Create CQL App',
      description: 'Generated by create cql app',
    }
  }
}

function hexToHsl(hex: string): string {
  // Remove the hash sign if present
  hex = hex?.replace(/^#/, '')

  // Parse the hex color
  const r = parseInt(hex?.substring(0, 2), 16) / 255
  const g = parseInt(hex?.substring(2, 4), 16) / 255
  const b = parseInt(hex?.substring(4, 6), 16) / 255

  // Find min and max values
  const max = Math.max(r, g, b)
  const min = Math.min(r, g, b)

  // Calculate lightness
  let h = 0,
    s = 0,
    // eslint-disable-next-line prefer-const
    l = (max + min) / 2

  // Calculate saturation
  if (max !== min) {
    const d = max - min
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)

    // Calculate hue
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0)
        break
      case g:
        h = (b - r) / d + 2
        break
      case b:
        h = (r - g) / d + 4
        break
    }
    h *= 60
  }

  // Convert to percentages and round
  return `${Math.round(h)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`
}

const RootLayout = async ({ children }: { children: ReactNode }) => {
  const metadata = await getCachedSiteSettings()
  const generalSettings = metadata?.general
  const faviconUrl =
    typeof generalSettings?.faviconUrl === 'object'
      ? generalSettings?.faviconUrl?.url!
      : '/favicon.ico'

  const { dark, light } = metadata?.theme || {}
  return (
    <html
      lang='en'
      style={
        {
          '--primary': hexToHsl(light?.primaryColor!),
          '--secondary': hexToHsl(dark?.primaryColor!),
          '--bg-light': hexToHsl(light?.foregroundColor!),
          '--bg-lighter': hexToHsl(light?.backgroundColor!),
          '--bg-dark': hexToHsl(dark?.foregroundColor!),
          '--bg-darker': hexToHsl(dark?.backgroundColor!),
          '--text-white': hexToHsl(dark?.textColor!),
          '--text-black': hexToHsl(light?.textColor!),
        } as React.CSSProperties & { [key: `--${string}`]: string }
      }>
      <head>
        <link rel='icon' type='image/x-icon' href={faviconUrl} />

        <GoogleAdsense metadata={metadata} />
        <GoogleAnalytics metadata={metadata} />
      </head>
      <body className={outfit.className}>
        <Provider>{children}</Provider>
      </body>
    </html>
  )
}

export default RootLayout
